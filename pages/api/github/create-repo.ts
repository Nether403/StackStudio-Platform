/*
 * API Route: /api/github/create-repo.ts (Enhanced Version)
 *
 * This endpoint creates a new GitHub repository based on a saved blueprint.
 * Enhanced version with improved authentication using user's GitHub OAuth token,
 * Octokit SDK integration, and comprehensive starter file generation.
 */

import type { NextApiRequest, NextApiResponse } from 'next';
import { getServerSession } from "next-auth/next";
import { authOptions } from "../auth/[...nextauth]";
import { db } from "../../../lib/firebase-admin";
import { Octokit } from "@octokit/rest";
import type { AuthOptions } from "next-auth";

// Extend the session type to include the user id
interface ExtendedSession {
  user?: {
    id?: string;
    email?: string | null;
    name?: string | null;
    image?: string | null;
  };
}

interface GitHubCreateRepoResponse {
  id: number;
  name: string;
  full_name: string;
  html_url: string;
  clone_url: string;
  ssh_url: string;
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).end(`Method ${req.method} Not Allowed`);
  }

  // 1. Get the user's session to ensure they are logged in
  const session = await getServerSession(req, res, authOptions as AuthOptions) as ExtendedSession;

  if (!session || !session.user) {
    return res.status(401).json({ error: "Unauthorized. You must be logged in." });
  }

  const userId = session.user.email;
  if (!userId) {
    return res.status(401).json({ error: "Unable to identify user." });
  }

  try {
    const { blueprintId, repoName, isPrivate = false } = req.body;

    // Validate input
    if (!blueprintId) {
      return res.status(400).json({ error: "Missing blueprintId" });
    }

    // 2. Fetch the blueprint from Firestore
    const blueprintRef = db.collection("blueprints").doc(blueprintId);
    const blueprintDoc = await blueprintRef.get();

    if (!blueprintDoc.exists) {
      return res.status(404).json({ error: "Blueprint not found" });
    }

    const blueprintData = blueprintDoc.data();
    if (blueprintData?.userId !== userId) {
      return res.status(403).json({ error: "Forbidden. You can only create repos from your own blueprints." });
    }

    // 3. Get user's GitHub access token from accounts collection
    const accountsQuery = db.collection("accounts")
      .where("userId", "==", userId)
      .where("provider", "==", "github")
      .limit(1);
    
    const accountSnapshot = await accountsQuery.get();
    
    if (accountSnapshot.empty) {
      return res.status(403).json({ 
        error: "GitHub account not linked. Please sign in with GitHub to create repositories.",
        requiresAuth: true 
      });
    }

    const githubAccount = accountSnapshot.docs[0].data();
    const accessToken = githubAccount.access_token;

    if (!accessToken) {
      return res.status(500).json({ 
        error: "Could not retrieve GitHub access token. Please try signing in again.",
        requiresAuth: true 
      });
    }

    // 4. Initialize Octokit with user's token
    const octokit = new Octokit({ auth: accessToken });

    // 5. Create the GitHub repository
    const sanitizedRepoName = repoName ? sanitizeRepoName(repoName) : sanitizeRepoName(blueprintData.projectName);
    
    const repoResponse = await octokit.repos.createForAuthenticatedUser({
      name: sanitizedRepoName,
      description: blueprintData.projectIdea || "Generated by StackFast",
      private: isPrivate,
      auto_init: false, // We'll create files manually
      gitignore_template: detectGitignoreTemplate(blueprintData.blueprintData),
      license_template: "mit"
    });
    
    const githubRepo = repoResponse.data;

    // 6. Generate and create starter files
    const starterFiles = generateStarterFiles(blueprintData.blueprintData);

    // Create files one by one using Octokit
    for (const file of starterFiles) {
      await octokit.repos.createOrUpdateFileContents({
        owner: githubRepo.owner.login,
        repo: githubRepo.name,
        path: file.path,
        message: file.message,
        content: Buffer.from(file.content).toString('base64'),
      });
    }

    // 7. Update the blueprint with GitHub repo info
    await blueprintRef.update({
      githubRepo: {
        id: githubRepo.id,
        name: githubRepo.name,
        fullName: githubRepo.full_name,
        htmlUrl: githubRepo.html_url,
        cloneUrl: githubRepo.clone_url,
        sshUrl: githubRepo.ssh_url,
        createdAt: new Date()
      },
      updatedAt: new Date()
    });

    // 8. Return success response
    res.status(201).json({
      success: true,
      repository: {
        name: githubRepo.name,
        url: githubRepo.html_url,
        cloneUrl: githubRepo.clone_url,
        filesCreated: starterFiles.length
      },
      message: "GitHub repository created successfully!"
    });

  } catch (error) {
    console.error('Error creating GitHub repository:', error);
    
    // Enhanced error handling with Octokit errors
    if (error && typeof error === 'object' && 'status' in error) {
      const statusError = error as { status: number; message?: string };
      
      if (statusError.status === 422) {
        return res.status(422).json({ 
          error: "A repository with this name already exists on your GitHub account.",
          suggestion: "Try a different name or add a suffix like '-v2'"
        });
      }
      
      if (statusError.status === 403) {
        return res.status(403).json({ 
          error: "Permission denied. Please ensure the GitHub app has 'repo' scope permissions.",
          requiresAuth: true
        });
      }
      
      if (statusError.status === 404) {
        return res.status(404).json({ 
          error: "GitHub API endpoint not found. Please try again.",
          requiresAuth: true
        });
      }
      
      if (statusError.status === 401) {
        return res.status(401).json({ 
          error: "GitHub authentication failed. Please sign in again.",
          requiresAuth: true
        });
      }
    }

    res.status(500).json({ 
      error: "Failed to create GitHub repository",
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}

// Helper Functions

function sanitizeRepoName(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '') // Remove special characters
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/-+/g, '-') // Replace multiple hyphens with single
    .replace(/^-|-$/g, '') // Remove leading/trailing hyphens
    .slice(0, 100); // GitHub repo name limit
}

function detectGitignoreTemplate(blueprintData: any): string {
  const stack = blueprintData?.recommendedStack || [];
  
  // Check for Node.js/JavaScript frameworks
  const hasNode = stack.some((tool: any) => 
    tool.name?.toLowerCase().includes('node') ||
    tool.name?.toLowerCase().includes('next') ||
    tool.name?.toLowerCase().includes('react') ||
    tool.name?.toLowerCase().includes('vue') ||
    tool.name?.toLowerCase().includes('angular')
  );
  
  if (hasNode) return 'Node';
  
  // Check for Python
  const hasPython = stack.some((tool: any) => 
    tool.name?.toLowerCase().includes('python') ||
    tool.name?.toLowerCase().includes('django') ||
    tool.name?.toLowerCase().includes('flask') ||
    tool.name?.toLowerCase().includes('fastapi')
  );
  
  if (hasPython) return 'Python';
  
  // Default to Node for web projects
  return 'Node';
}

function generateStarterFiles(blueprintData: any): Array<{path: string, content: string, message: string}> {
  const files = [];
  const stack = blueprintData?.recommendedStack || [];
  const summary = blueprintData?.summary || '';
  const projectPrompt = blueprintData?.projectPrompt || '';

  // Always create README.md
  files.push({
    path: 'README.md',
    content: generateReadmeContent(blueprintData),
    message: 'Add project README with tech stack overview'
  });

  // Create package.json for Node.js projects
  const hasNode = stack.some((tool: any) => 
    tool.name?.toLowerCase().includes('node') ||
    tool.name?.toLowerCase().includes('next') ||
    tool.name?.toLowerCase().includes('react')
  );

  if (hasNode) {
    files.push({
      path: 'package.json',
      content: generatePackageJson(blueprintData),
      message: 'Add package.json with recommended dependencies'
    });
  }

  // Create requirements.txt for Python projects
  const hasPython = stack.some((tool: any) => 
    tool.name?.toLowerCase().includes('python') ||
    tool.name?.toLowerCase().includes('django') ||
    tool.name?.toLowerCase().includes('flask')
  );

  if (hasPython) {
    files.push({
      path: 'requirements.txt',
      content: generateRequirementsTxt(stack),
      message: 'Add Python requirements file'
    });
  }

  // Create STACKFAST.md with full blueprint details
  files.push({
    path: 'STACKFAST.md',
    content: generateStackFastDoc(blueprintData),
    message: 'Add StackFast blueprint documentation'
  });

  return files;
}

function generateReadmeContent(blueprintData: any): string {
  const projectName = blueprintData.projectName || 'My StackFast Project';
  const projectIdea = blueprintData.projectIdea || 'A new project';
  const stack = blueprintData.blueprintData?.recommendedStack || [];
  const cost = blueprintData.blueprintData?.estimatedCost || { min: 0, max: 0 };

  return `# ${projectName}

> ${projectIdea}

## 🚀 Tech Stack

This project was generated using [StackFast](https://stackfast.tech) with the following recommended technologies:

${stack.map((tool: any) => `- **${tool.name}** (${tool.category}) - ${tool.reason}`).join('\n')}

## 💰 Estimated Costs

- **Minimum**: $${cost.min}/month
- **Maximum**: $${cost.max}/month

## 🏗️ Getting Started

1. Clone this repository
\`\`\`bash
git clone <your-repo-url>
cd ${projectName.toLowerCase().replace(/\s+/g, '-')}
\`\`\`

2. Install dependencies
\`\`\`bash
# For Node.js projects
npm install

# For Python projects
pip install -r requirements.txt
\`\`\`

3. Set up your environment variables
\`\`\`bash
cp .env.example .env.local
# Edit .env.local with your configuration
\`\`\`

4. Start development
\`\`\`bash
# For Node.js projects
npm run dev

# For Python projects
python main.py
\`\`\`

## 📋 Next Steps

- [ ] Set up your development environment
- [ ] Configure environment variables
- [ ] Implement core features
- [ ] Set up deployment pipeline
- [ ] Add tests

## 🔗 Resources

- [StackFast Documentation](https://docs.stackfast.tech)
- [Tech Stack Details](./STACKFAST.md)

---

*Generated by [StackFast](https://stackfast.tech) - From idea to code, instantly.*
`;
}

function generatePackageJson(blueprintData: any): string {
  const projectName = sanitizeRepoName(blueprintData.projectName || 'stackfast-project');
  const description = blueprintData.projectIdea || 'A StackFast generated project';
  const stack = blueprintData.blueprintData?.recommendedStack || [];

  // Detect dependencies based on recommended stack
  const dependencies: { [key: string]: string } = {};
  const devDependencies: { [key: string]: string } = {};

  stack.forEach((tool: any) => {
    const toolName = tool.name?.toLowerCase() || '';
    
    if (toolName.includes('react')) {
      dependencies['react'] = '^18.0.0';
      dependencies['react-dom'] = '^18.0.0';
      devDependencies['@types/react'] = '^18.0.0';
      devDependencies['@types/react-dom'] = '^18.0.0';
    }
    
    if (toolName.includes('next')) {
      dependencies['next'] = '^14.0.0';
    }
    
    if (toolName.includes('tailwind')) {
      devDependencies['tailwindcss'] = '^3.3.0';
      devDependencies['autoprefixer'] = '^10.4.0';
      devDependencies['postcss'] = '^8.4.0';
    }
    
    if (toolName.includes('typescript')) {
      devDependencies['typescript'] = '^5.0.0';
      devDependencies['@types/node'] = '^20.0.0';
    }
  });

  const packageJson = {
    name: projectName,
    version: '1.0.0',
    description,
    main: 'index.js',
    scripts: {
      dev: 'next dev',
      build: 'next build',
      start: 'next start',
      lint: 'next lint'
    },
    dependencies,
    devDependencies,
    keywords: ['stackfast', 'generated', 'web-app'],
    author: 'StackFast User',
    license: 'MIT'
  };

  return JSON.stringify(packageJson, null, 2);
}

function generateRequirementsTxt(stack: any[]): string {
  const requirements = [];
  
  stack.forEach((tool: any) => {
    const toolName = tool.name?.toLowerCase() || '';
    
    if (toolName.includes('django')) {
      requirements.push('Django>=4.2.0');
    }
    if (toolName.includes('flask')) {
      requirements.push('Flask>=2.3.0');
    }
    if (toolName.includes('fastapi')) {
      requirements.push('fastapi>=0.100.0');
      requirements.push('uvicorn>=0.22.0');
    }
  });
  
  // Add common dependencies
  requirements.push('python-dotenv>=1.0.0');
  requirements.push('requests>=2.31.0');
  
  return requirements.join('\n');
}

function generateStackFastDoc(blueprintData: any): string {
  return `# StackFast Blueprint Documentation

This file contains the complete blueprint generated by StackFast for this project.

## Project Details

- **Name**: ${blueprintData.projectName || 'Untitled Project'}
- **Description**: ${blueprintData.projectIdea || 'No description provided'}
- **Generated**: ${new Date().toISOString()}

## Recommended Tech Stack

${JSON.stringify(blueprintData.blueprintData, null, 2)}

## How to Use This Blueprint

1. **Review the recommended stack** above to understand why each technology was chosen
2. **Check the cost estimates** to plan your budget
3. **Follow the setup instructions** in README.md
4. **Implement features gradually** based on the project prompt

## StackFast Resources

- [StackFast Platform](https://stackfast.tech)
- [Documentation](https://docs.stackfast.tech)
- [Community](https://community.stackfast.tech)

---

*This documentation was auto-generated by StackFast. You can modify this file as your project evolves.*
`;
}